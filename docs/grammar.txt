/*
 *  GRAMMAR
 *  Author: Brett Heithold
 *  Last Revised: 10/21/2020
 *
 *  NOTES:
 *          + NO left-recursive rules
 */


program : import program
        | optStatementList


import : IMPORT QUOTE ID DOT ID QUOTE


statement : definition SEMI
          | expression SEMI
          | loop
          | ifStatement
          | returnStatement SEMI
          | CONTINUE SEMI
          | BREAK SEMI


statementList : statement optStatementList


optStatementList : statementList
                 | *EMPTY*


definition : variableDefinition
           | functionDefinition
           | classDefinition


variableDefinition : VAR ID
                   | VAR ID EQUAL expression
                   | ID EQUAL expression


functionDefinition : FUNCTION ID OPAREN parameterList CPAREN block
                   | FUNCTION ID OPAREN VOID CPAREN block


classDefinition : CLASS ID optInheritance block


optInheritance : COLON ID
               | *EMPTY*


functionCall : ID OPAREN optExpressionList CPAREN


parameterList : ID
              | ID COMMA parameterList


optParameterList : parameterList
                 | *EMPTY*


expression : unary
           | unary binaryOperator expression
           | unaryOperator unary
           | unary unaryOperator


optExpression : expression
              | *EMPTY*


expressionList : expression
               | expression COMMA expressionList


optExpressionList : expressionList
                  | *EMPTY*


unary : ID
      | functionCall
      | ID OBRACKET optExpressionList CBRACKET
      | INTEGER
      | REAL
      | CHAR
      | STRING
      | BOOLEAN
      | MINUS unary
      | OPAREN expression CPAREN
      | lambdaDef
      | PRINT OPAREN expressionList CPAREN
      | NULL


lambdaDef : LAMBDA OPAREN optParameterList CPAREN block


block : OBRACE optStatementList CBRACE


loop : forLoop
     | whileLoop


forLoop : FOR OPAREN variableDefinition SEMI expression SEMI expression CPAREN block
        | FOR OPAREN ID SEMI expression SEMI expression CPAREN black


whileLoop : WHILE OPAREN expression CPAREN block


ifStatement : IF OPAREN expression CPAREN block optElseStatement


returnStatement : RETURN optExpression


elseStatement : ELSE block
              | ELSE ifStatement


optElseStatement : elseStatement
                 | *EMPTY*


unaryOperator : NOT
              | UMINUS
              | PLUS_PLUS
              | MINUS_MINUS


binaryOperator : PLUS
               | MINUS
               | MULTIPLY
               | DIVIDE
               | POW
               | MODULO
               | ASSIGN
               | PLUS_ASSIGN
               | MINUS_ASSIGN
               | MULTIPLY_ASSIGN
               | DIVIDE_ASSIGN
               | POW_ASSIGN
               | MODULO_ASSIGN
               | DOT


logicalOperator : AND
                | OR
                | XOR


comparator : LESS_THAN
           | GREATER_THAN
           | LESS_EQUAL
           | GREATER_EQUAL
           | DOUBLE_EQUAL
           | NOT_EQUAL
