/*
 *  GRAMMAR
 *  Author: 		Brett Heithold
 *  File: 		grammar.txt
 *  Created on: 	1/6/2020
 *  Last revision: 	10/27/2020
 *
 *  NOTES:
 *          + NO left-recursive rules
 */


program : import program
        | statementList program
        | *EMPTY*


import : IMPORT STRING_TYPE


statement : definition
          | expression SEMI
          | loop
          | ifStatement
          | returnStatement SEMI
          | CONTINUE SEMI
          | BREAK SEMI


statementList : statement optStatementList


optStatementList : statementList
                 | *EMPTY*


definition : variableDefinition SEMICOLON
           | functionDefinition
           | classDefinition


variableDefinition : VAR ID optInit


optInit : ASSIGN expression
        | *EMPTY*


variableExpression : ID
	      	   | ID OPAREN optExpressionList CPAREN
	      	   | ID OBRACKET optExpressionList CBRACKET
		   | ID binaryOperator expression


functionDefinition : FUNCTION ID OPAREN parameterList CPAREN block
                   | FUNCTION ID OPAREN VOID CPAREN block


classDefinition : CLASS ID optInheritance block


optInheritance : COLON ID
               | *EMPTY*


parameterList : ID
              | ID COMMA parameterList


optParameterList : parameterList
                 | *EMPTY*


expression : unary
           | unary binaryOperator expression
           | unaryOperator unary
           | unary unaryOperator
	   | unary logicalOperator expression
	   | unary comparator expression


optExpression : expression
              | *EMPTY*


expressionList : expression
               | expression COMMA expressionList
	       | expression logicalOperator expressionList


optExpressionList : expressionList
                  | *EMPTY*


unary : variableExpression
      | INTEGER
      | REAL
      | STRING
      | BOOLEAN
      | MINUS unary
      | OPAREN expression CPAREN
      | lambdaDef
      | PRINT OPAREN expressionList CPAREN
      | PRINTLN OPAREN expressionList CPAREN
      | NULL


lambdaDef : LAMBDA OPAREN optParameterList CPAREN block


block : OBRACE optStatementList CBRACE


loop : forLoop
     | whileLoop


forLoop : FOR OPAREN variableDefinition SEMI expression SEMI expression CPAREN block
        | FOR OPAREN variableExpression SEMI expression SEMI expression CPAREN black


whileLoop : WHILE OPAREN expressionList CPAREN block


ifStatement : IF OPAREN expression CPAREN block optElseStatement


returnStatement : RETURN optExpression


elseStatement : ELSE block
              | ELSE ifStatement


optElseStatement : elseStatement
                 | *EMPTY*


unaryOperator : NOT
              | UMINUS
              | PLUS_PLUS
              | MINUS_MINUS


binaryOperator : PLUS
               | MINUS
               | MULTIPLY
               | DIVIDE
               | POW
               | MODULO
               | ASSIGN
               | PLUS_ASSIGN
               | MINUS_ASSIGN
               | MULTIPLY_ASSIGN
               | DIVIDE_ASSIGN
               | POW_ASSIGN
               | MODULO_ASSIGN
               | DOT


logicalOperator : AND
                | OR
                | XOR


comparator : LESS_THAN
           | GREATER_THAN
           | LESS_EQUAL
           | GREATER_EQUAL
           | DOUBLE_EQUAL
           | NOT_EQUAL
